from airline import Airline
from flight import DomesticFlight, InternationalFlight
from booking import Booking
from datetime import datetime
import uuid


class FlightReservationSystem:
    def __init__(self):
        # A foglal√°si rendszer inicializ√°l√°sa egy l√©git√°rsas√°ggal √©s mintaadatokkal
        self.reservations = []
        self.airline = Airline("SkyFly")
        self.initialize_data()

    def initialize_data(self):
        """Kezd≈ë rep√ºl≈ëj√°ratok √©s foglal√°sok bet√∂lt√©se."""
        # Minta rep√ºl≈ëj√°ratok l√©trehoz√°sa
        belfoldi_jarat = DomesticFlight("DF001", "Budapest", 12000)
        nemzetkozi_jarat_1 = InternationalFlight("IF101", "Dubai", 55000)
        nemzetkozi_jarat_2 = InternationalFlight("IF202", "Kathmandu", 85000)

        # J√°ratok hozz√°ad√°sa a l√©git√°rsas√°ghoz
        self.airline.add_flight(belfoldi_jarat)
        self.airline.add_flight(nemzetkozi_jarat_1)
        self.airline.add_flight(nemzetkozi_jarat_2)

        # Mintafoglal√°sok l√©trehoz√°sa egyedi azonos√≠t√≥val
        self.reservations.append(Booking(self.generate_id(), belfoldi_jarat, "Tihamer", datetime.now(), "2024-12-01"))
        self.reservations.append(Booking(self.generate_id(), nemzetkozi_jarat_1, "Gipsz Jakab", datetime.now(), "2024-12-05"))
        self.reservations.append(Booking(self.generate_id(), nemzetkozi_jarat_2, "Gipsz Jakabne", datetime.now(), "2024-12-10"))
        self.reservations.append(Booking(self.generate_id(), nemzetkozi_jarat_2, "if. Gipsz Jaki", datetime.now(), "2024-12-10"))

    def generate_id(self):
        """Egyedi azonos√≠t√≥ gener√°l√°sa minden foglal√°shoz."""
        return str(uuid.uuid4())

    def create_reservation(self, flight_number, passenger_name, flight_date):
        """
        √öj foglal√°s l√©trehoz√°sa, ha a j√°rat l√©tezik √©s a d√°tum √©rv√©nyes.

        Args:
            flight_number (str): A foglalni k√≠v√°nt j√°ratsz√°m.
            passenger_name (str): Az utas neve.
            flight_date (str): A j√°rat d√°tuma √â√â√â√â-HH-NN form√°tumban.
        """
        flight = self.find_flight(flight_number)
        if flight:
            try:
                booking_date = datetime.now()
                flight_date_parsed = datetime.strptime(flight_date, "%Y-%m-%d")
                if flight_date_parsed <= booking_date:
                    print("Hiba: A j√°rat d√°tuma csak a j√∂v≈ëben lehet, hacsak nincs id≈ëg√©ped!")
                    return
                # √öj foglal√°s l√©trehoz√°sa egy egyedi ID-val
                unique_id = self.generate_id()
                new_reservation = Booking(unique_id, flight, passenger_name, booking_date, flight_date)
                self.reservations.append(new_reservation)
                print("Foglal√°s sikeres! üéâ")
                print(f"Foglal√°si azonos√≠t√≥: {unique_id}")
                print(f"K√∂lts√©g: {new_reservation.total_price()} Ft, J√°rat d√°tuma: {flight_date}")
            except ValueError:
                print("√ârv√©nytelen d√°tumform√°tum. Haszn√°lja az √â√â√â√â-HH-NN form√°tumot (pl.: 2024-12-15).")
        else:
            print("Nem tal√°lhat√≥ j√°rat ezzel a sz√°mmal. K√©rlek, n√©zd meg √∫jra!")

    def cancel_reservation(self, reservation_id):
        """
        Foglal√°s t√∂rl√©se az egyedi foglal√°si azonos√≠t√≥ alapj√°n.

        Args:
            reservation_id (str): A t√∂r√∂lni k√≠v√°nt foglal√°s egyedi azonos√≠t√≥ja.
        """
        for reservation in self.reservations:
            if reservation.id == reservation_id:
                self.reservations.remove(reservation)
                print("Foglal√°s sikeresen t√∂r√∂lve. Azt mondj√°k, t√∂r√∂lni emberi dolog!")
                return
        print("Nem tal√°lhat√≥ foglal√°s ezzel az azonos√≠t√≥val. Lehet, hogy csak √°lmodtad?")

    def show_reservations(self):
        """Az √∂sszes akt√≠v foglal√°s megjelen√≠t√©se."""
        if not self.reservations:
            print("Nincsenek akt√≠v foglal√°sok. √úresek az √ºl√©sek, mint a sivatag!")
        else:
            for reservation in self.reservations:
                print(reservation)

    def find_flight(self, flight_number):
        """Keres √©s visszaad egy j√°ratot a j√°ratsz√°m alapj√°n."""
        return next((flight for flight in self.airline.flights if flight.number == flight_number), None)


if __name__ == "__main__":
    system = FlightReservationSystem()
    while True:
        # A f≈ëmen√º megjelen√≠t√©se
        print("\n--- Rep√ºl≈ëjegy Foglal√°si Rendszer ---")
        print("A. √öj Foglal√°s L√©trehoz√°sa")
        print("B. Foglal√°s T√∂rl√©se")
        print("C. Foglal√°sok Megtekint√©se")
        print("D. El√©rhet≈ë J√°ratok Megtekint√©se")
        print("E. Kil√©p√©s")
        choice = input("V√°lassz egy opci√≥t: ").upper()

        if choice == "A":
            # √öj foglal√°s l√©trehoz√°sa
            system.airline.display_flights()
            flight_num = input("J√°ratsz√°m: ")
            name = input("Utas neve: ")
            date = input("J√°rat d√°tuma (√â√â√â√â-HH-NN): ")
            system.create_reservation(flight_num, name, date)
        elif choice == "B":
            # Foglal√°s t√∂rl√©se
            reservation_id = input("Add meg a t√∂r√∂lni k√≠v√°nt foglal√°s azonos√≠t√≥j√°t: ")
            system.cancel_reservation(reservation_id)
        elif choice == "C":
            # Akt√≠v foglal√°sok megtekint√©se
            system.show_reservations()
        elif choice == "D":
            # El√©rhet≈ë j√°ratok megtekint√©se
            system.airline.display_flights()
        elif choice == "E":
            print("Kil√©p√©s a programb√≥l. K√∂sz√∂nj√ºk, hogy vel√ºnk rep√ºlt√©l! Rem√©lj√ºk, √∫jra tal√°lkozunk az √©gben! ‚úàÔ∏è")
            break
        else:
            print("√ârv√©nytelen opci√≥. Pr√≥b√°ld √∫jra, mert ez most nem volt sikeres.")